<?php
/**
 * @file
 * The main module file for the stickynote module
 */

/**
 * Implements hook_menu().
 */
function stickynote_menu() {
  $items['admin/structure/stickynote/manage'] = array(
    'title' => 'Stickynote',
    'description' => 'Manage stickynote structure',
    'page callback' => 'stickynote_info',
    'access arguments' => array('administer stickynote'),
    'file' => 'includes/stickynote.admin.inc',
  );
  $items['stickynote/%stickynote'] = array(
    'title callback' => 'stickynote_page_title',
    'title arguments' => array(1),
    'page callback' => 'stickynote_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view stickynotes'),
    'type' => MENU_CALLBACK,
  );
  $items['stickynote/add'] = array(
    'title' => 'Add Stickynote',
    'page callback' => 'stickynote_add_page',
    'access arguments' => array('create stickynotes'),
    'type' => MENU_CALLBACK,
  );
  $items['stickynote/%stickynote/delete'] = array(
    'title' => 'Delete Stickynote',
    'page callback' => 'stickynote_delete',
    'page arguments' => array(1),
    'access arguments' => array('delete stickynotes'),
    'type' => MENU_CALLBACK,
  );
  $items['stickynote/%stickynote/edit'] = array(
    'title' => 'Edit Stickynote',
    'page callback' => 'stickynote_edit',
    'page arguments' => array(1),
    'access arguments' => array('edit stickynotes'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}



/**
 * Implements hook_entity_info().
 */
function stickynote_entity_info() {
  $stickynote_info['stickynote'] = array(
    'label' => t('Stickynote'),
    'controller class' => 'StickynoteController',
    'base table' => 'stickynote',
    'load hook' => 'stickynote_load',
    'uri callback' => 'stickynote_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'snid',
      'label' => 'note',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'stickynote' => array(
        'label' => 'Stickynote',
        'admin' => array(
          'path' => 'admin/structure/stickynote/manage',
          'access arguments' => array('administer stickynote'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Stickynote'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  return $stickynote_info;
}

/**
 * Defines URI for entity
 * @param $stickynote
 */
function stickynote_uri($stickynote) {
  return array(
    'path' => 'stickynote/' . $stickynote->snid,
  );
}

/**
 * Loads a stickynode object based on the snid
 *
 * @param mixed $snid An integer or an array of integers matching snids.
 * @param boolean $reset
 * @return object
 */
function stickynote_load($snid = NULL, $reset = FALSE) {
  $snids = (isset($snid) ? array($snid) : array());
  $stickynote = stickynote_load_multiple($snids, $reset);
  return $stickynote ? reset($stickynote) : FALSE;
}

/**
 * Helper function. Loads multiple stickynotes.
 */
function stickynote_load_multiple($snids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('stickynote', $snids, $conditions, $reset);
}

/**
 * Stickynote add page callback function.
 */
function stickynote_add_page() {
  $stickynote = (object)array (
    'snid' => '',
    'type' => 'stickynote',
    'note' => '',
    'url' => current_path(),
    'uid' => '',
  );

  return drupal_get_form('stickynote_add_form', $stickynote);
}

/**
 * Implements hook_form().
 */
function stickynote_add_form($form, &$form_state, $stickynote) {
  $referring_url = !empty($stickynote->url) ? $stickynote->url : current_path();
  $form['notes_table'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="notes_table">',
    '#suffix' => '</div>',
    '#markup' => stickynote_notes_table($referring_url),
  );
  // @TODO: Remove the add note fields if user does not have access to creating
  // notes
  $form['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Add Note'),
    '#required' => TRUE,
    '#rows' => 2,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'submit_note_add_callback',
      'wrapper' => 'notes_table',
      'name' => 'submit1',
    ),
    '#value' => t('Add Note'),
  );

  $form_state['referring_url'] = $referring_url;
  field_attach_form('stickynote', $stickynote, $form, $form_state);

  return $form;
}

/**
 * Implements hook_form().
 */
function stickynote_edit_form($form, &$form_state, $stickynote) {
  $form['notes_table'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="notes_table">',
    '#suffix' => '</div>',
    '#markup' => stickynote_notes_table($stickynote->url),
  );
  $form['note'] = array(
    '#type' => 'textarea',
    '#title' => t('Edit Note'),
    '#required' => TRUE,
    '#default_value' => $stickynote->note,
    '#rows' => 2,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'submit_note_edit_callback',
      'wrapper' => 'block-stickynote-stickynote-block',
      'name' => 'submit2',
    ),
    '#value' => t('Submit Change'),
  );

  // Save the referring url and the original stickynote
  $form_state['referring_url'] = $stickynote->url;
  $form_state['original_stickynote'] = $stickynote;

  field_attach_form('stickynote', $stickynote, $form, $form_state);

  return $form;
}

/**
 * Add submit callback
 */
function submit_note_add_callback($form, $form_state) {
  // update table with new data
  $element = $form['notes_table'];
  $element['#markup'] = stickynote_notes_table($form_state['referring_url']);
  return $element;
}

/**
 * Edit submit callback
 */
function submit_note_edit_callback($form, $form_state) {
  // repace add form with edit form
  $commands[] = ajax_command_replace('#stickynote-edit-form', drupal_render(drupal_get_form('stickynote_add_form', $form_state['original_stickynote'])));
  $page = array('#type' => 'ajax', '#commands' => $commands);
  return $page;
}

/**
 * Stickynote save callback
 * @param $stickynote
 */
function stickynote_save(&$stickynote) {
  return entity_get_controller('stickynote')->save($stickynote);
}

/**
 * Stickynote delete callback
 * @param $stickynote
 */
function stickynote_delete($stickynote) {
  // delete stickynote record
  entity_get_controller('stickynote')->delete($stickynote);
  $commands = array();
  $output = '<div id="add-edit-form">' . drupal_render(drupal_get_form('stickynote_add_form', $stickynote)) . '</div>';

  // replace div with new form/table
  $commands[] = ajax_command_replace('#add-edit-form', $output);;
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Stickynote edit callback
 * @param $stickynote
 */
function stickynote_edit($stickynote) {
  $commands = array();

  $output = '<div id="add-edit-form">' . drupal_render(drupal_get_form('stickynote_edit_form', $stickynote)) . '</div>';

  // replace div with new form/table
  $commands[] = ajax_command_replace('#add-edit-form', $output);

  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Implements hook_permission().
 */
function stickynote_permission() {
    return array(
    'administer stickynote' =>  array(
      'title' => t('Administer Stickynote'),
      'restrict access' => TRUE,
    ),
    'view stickynotes' => array(
      'title' => t('View stickynotes'),
      'restrict access' => TRUE,
    ),
    'create stickynotes' => array(
      'title' => t('Create stickynotes')
    ),
    'edit stickynotes' => array(
      'title' => t('Edit stickynotes')
    ),
    'delete stickynotes' => array(
      'title' => t('Delete stickynotes')
    ),
  );
}

/**
 * Stickynote add validate function
 */
function stickynote_add_form_validate($form, &$form_state) {
  $stickynote_submission = (object) $form_state['values'];
  field_attach_form_validate('stickynote', $stickynote_submission, $form, $form_state);
}

/**
 * Stickynote add submit function
 */
function stickynote_add_form_submit($form, &$form_state) {
  global $user;

  // set variables and save submission
  $stickynote_submission = (object) $form_state['values'];
  $stickynote_submission->created = time();
  $stickynote_submission->updated = time();
  $stickynote_submission->url = $form_state['referring_url'];
  $stickynote_submission->uid = $user->uid;
  field_attach_submit('stickynote', $stickynote_submission, $form, $form_state);
  $stickynote = stickynote_save($stickynote_submission);
}

/**
 * Stickynote edit validate function
 */
function stickynote_edit_form_validate($form, &$form_state) {
  $stickynote_submission = (object) $form_state['values'];
  field_attach_form_validate('stickynote', $stickynote_submission, $form, $form_state);
}

/**
 * Stickynote edit submit function
 */
function stickynote_edit_form_submit($form, &$form_state) {
  // get original stickynote and update fields
  $stickynote_submission = (object) $form_state['original_stickynote'];
  $stickynote_submission->note = $form_state['values']['note'];
  $stickynote_submission->updated = time();

  field_attach_submit('stickynote', $stickynote_submission, $form, $form_state);

  $stickynote = entity_get_controller('stickynote')->update($stickynote_submission);
}

/**
 * Stickynote title callback
 * 
 * @param $stickynote
 */
function stickynote_page_title($stickynote) {
  return $stickynote->snid;
}

/**
 * Builds stickynote page
 * 
 * @param $stickynote
 * @param $view_mode
 */
function stickynote_page_view($stickynote, $view_mode = 'full') {
  $stickynote->content = array();

  // Build fields content.
  field_attach_prepare_view('stickynote', array($stickynote->snid => $stickynote), $view_mode);
  entity_prepare_view('stickynote', array($stickynote->snid => $stickynote));
  $stickynote->content += field_attach_view('stickynote', $stickynote, $view_mode);

  // @todo This can't possibly be the correct way to output a base entity field
  $stickynote->content += array(
    'note' => array(
      '#theme' => 'field',
      '#weight' => '-999',
      '#access' => TRUE,
      '#title' => 'note',
      '#label_display' => 'above',
      '#object' => $stickynote,
      '#entity_type' => 'stickynote',
      '#language' => 'und',
      '#view_mode' => 'full',
      '#field_name' => 'note',
      '#bundle' => 'stickynote',
      '#field_type' => 'text',
      '#formatter' => 'text_default',
      '#items' => array(
        0 => array(
          'value' => $stickynote->note,
          'format' => NULL,
          'safe_value' => $stickynote->note,
        ),
      ),
      0 => array(
        '#markup' => $stickynote->note,
      ),
    )
  );

  return $stickynote->content;
}

/**
 * Implements hook_field_extra_fields().
 * Exposes note field to field UI for managing fields/display
 */
function stickynote_field_extra_fields() {
  $return = array();
  $return['stickynote']['stickynote'] = array(
    'form' => array(
      'note' => array(
        'label' => t('Note'),
        'description' => t('Stickynote'),
        'weight' => 0,
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_block_info().
 */
function stickynote_block_info() {
  $blocks = array();

  $blocks['stickynote_block'] = array(
    'info' => t('Stickynote block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function stickynote_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'stickynote_block':
      if (user_access('view stickynotes')) {
        module_load_include('inc', 'stickynote', 'includes/stickynote.block');
        $block['subject'] = t('Stickynotes');
        $block['content'] = stickynote_block_contents();
      }
      break;
  }
  return $block;
}

/**
 * Get notes for referring_url/current url and
 * return as table including edit/delete etc...
 *
 * @param $referring_url
 */
function stickynote_notes_table($referring_url = NULL) {
  $can_edit = user_access('edit stickynotes');
  $can_delete = user_access('delete stickynotes');
  // Use current path if there is no reffering url
  if (isset($referring_url)) {
    $path = $referring_url;
  }
  else {
    $path = current_path();
  }

  // Get all stickynotes of path and order by created date
  $query = db_select('stickynote', 's')
    ->condition('url', $path)
    ->fields('s')
    ->orderBy('created', 'DESC');

  $result = $query->execute();

  // build rows for table
  foreach ($result as $key => $row) {
    $notes[$row->snid] = array(
      'data' => array(
        'note' => nl2br($row->note),
        'edit' => l(t('edit'), 'stickynote/' . $row->snid . '/edit', array('attributes' => array('class' => array('use-ajax')))),
        'delete' => l(t('delete'), 'stickynote/' . $row->snid . '/delete', array('attributes' => array('class' => array('use-ajax')))),
        'created' => format_date($row->created, 'short'), 
      )
    );
    if (!$can_edit) {
      unset($notes[$row->snid]['data']['edit']);
    }
    if (!$can_delete) {
      unset($notes[$row->snid]['data']['delete']);
    }
  }

  $output = '';

  $header = array();
  $header[] = t('Note');
  if ($can_edit) {
    $header[] = t('Edit');
  }
  if ($can_delete) {
    $header[] = t('Delete');
  }
  $header[] = t('Date');
  
  if (isset($notes)) {
    $table['header'] = $header;
    $table['rows'] = $notes;

    $output = theme('table', $table);
  }

  return $output;
}
